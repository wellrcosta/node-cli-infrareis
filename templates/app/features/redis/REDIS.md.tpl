# {{projectName}} + Redis (cache opcional)

Feature opcional de **cache Redis** para usar em qualquer preset (Minimal ou CRUD).

---

## üöÄ Vis√£o geral

* Conex√£o via **ioredis** (produ√ß√£o/dev)
* Testes **mockados** com **ioredis-mock** (n√£o precisa Redis real)
* Helpers prontos: `cacheGet`, `cacheSet`, `cacheDel`, `withCache`
* Config m√≠nima via `.env`

---

## ‚öôÔ∏è Vari√°veis de ambiente

Coloque no `.env` do projeto:

```env
REDIS_URL=redis://localhost:6379
REDIS_DEFAULT_TTL=300
```

* `REDIS_URL` ‚Üí URL do Redis. Se ausente, os helpers entram em **modo no-op** (n√£o quebram o app).
* `REDIS_DEFAULT_TTL` ‚Üí TTL padr√£o (em segundos) usado por `withCache`.

---

## üîå Como usar no c√≥digo

### Helpers b√°sicos

```ts
import { cacheGet, cacheSet, cacheDel } from "./cache/redis";

// salvar
await cacheSet("users:all", users, 120); // TTL 120s

// ler
const cached = await cacheGet("users:all");

// invalidar
await cacheDel("users:all");
```

### Cache por fun√ß√£o (`withCache`)

```ts
import { withCache } from "./cache/redis";

const users = await withCache({ key: "users:all", ttl: 300 }, async () => {
  // busca "cara" (DB, HTTP, etc.)
  return await repo.findAll();
});
```

> Se `REDIS_URL` n√£o estiver definido, `withCache` apenas executa a fun√ß√£o e retorna o valor (sem cache).

---

## üß™ Testes (mockados)

* Os testes desta feature usam **ioredis-mock**.
* N√£o √© necess√°rio ter Redis real rodando.

Para rodar:

```bash
npm test
```

---

## üí° Boas pr√°ticas

* Use chaves com prefixo de dom√≠nio: `users:byId:123`, `orders:recent`, etc.
* Invalide chaves relevantes ap√≥s opera√ß√µes de escrita (POST/PUT/DELETE).
* Considere TTLs pequenos em dados mut√°veis e maiores em dados est√°veis.

---

## üß∞ Exemplo de integra√ß√£o com CRUD (opcional)

No service de usu√°rios, voc√™ pode cachear a listagem:

```ts
import { withCache, cacheDel } from "./cache/redis";

export async function findAll() {
  return withCache({ key: "users:all", ttl: 120 }, () => repo.findAll());
}

export async function create(dto) {
  const u = await repo.create(dto);
  await cacheDel("users:all");
  return u;
}
```

---

## Troubleshooting

* **Sem REDIS\_URL**: os helpers viram no-op ‚Üí nada quebra, apenas n√£o h√° cache.
* **Conex√£o falhou**: a feature loga um aviso e volta a no-op (para n√£o interromper o startup).
* **TTL**: lembre que TTL √© em **segundos**.

---
